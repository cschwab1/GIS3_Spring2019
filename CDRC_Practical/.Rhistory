library(mosaic)
boxplot(c(57,66,69,71,72,73,74,77,78,78,79,79,81,81,82,83,83,88,89,94), horizontal=T)
summary(c(57,66,69,71,72,73,74,77,78,78,79,79,81,81,82,83,83,88,89,94))
data(iris)
histogram(~Petal.Length, data=iris)
histogram(~Petal.Length, data=iris, width = 0.1)
histogram(~Petal.Length, data=iris, width = 2)
histogram(~Petal.Length, data=iris, width = 0.5)
histogram(~Petal.Length, data=iris)
histogram(~Petal.Length, data=iris, width = 0.1)
histogram(~Petal.Length, data=iris, width = 0.05)
histogram(~Petal.Length, data=iris, width = 0.1)
histogram(~Petal.Length, data=iris, width = 0.5)
summary(iris)
dim(iris)
histogram(~Petal.Length, data=iris)
histogram(~Petal.Length, data=iris, width = 0.1)
bwplot(~Petal.Length, data=iris)
histogram(~Petal.Length, data=iris, width = 0.5)
histogram(~Petal.Length, data=iris)
bwplot(Species ~ Petal.Length, data=iris)
bwplot(Petal.Length ~ Species, data=iris)
bwplot(Sepal.Length ~ Species, data=iris)
bwplot(Petal.Length ~ Species, data=iris)
bwplot(Sepal.Length ~ Species, data=iris)
qplot(Petal.Length, Petal.Width, color= species, data=iris)
qplot(Petal.Length, Petal.Width, color= Species, data=iris)
mammals <- read.csv("~/Downloads/mammals.txt", sep="")
View(mammals)
arbuthnot = read.table("mammals.txt", header=TRUE)
mammals <- read.csv("~/Downloads/mammals.txt", sep="")
View(mammals)
mammals = read.table("mammals.txt", header=T)
library(mosaic)
qplot(Body, Brain, data=mammals)
qplot(Body, Brain, data=mammals, xlab="Body Weight (kg)", ylab="Brain Weight (g)")
qplot(log(Body), log(Brain), data=mammals)
mammals = read.table("mammals.txt", header=T)
library(mosaic)
qplot(Body, Brain, data=mammals)
qplot(Gestation, Brain, data=mammals, xlab="gestation length (days)", ylab="Brain Weight (g)")
qplot(log(Gestation), log(Brain), data=mammals)
qplot(Gestation, log(Brain), data=mammals)
qplot(log(Gestation), Brain, data=mammals)
qplot(Gestation, log(Brain), data=mammals)
mammals = read.table("mammals.txt", header=T)
library(mosaic)
qplot(Body, Brain, data=mammals)
qplot(Gestation, Body, data=mammals, xlab="gestation length (days)", ylab="Brain Weight (g)")
mammals = read.table("mammals.txt", header=T)
library(mosaic)
qplot(Body, Brain, data=mammals)
qplot(Gestation, Body, data=mammals, xlab="gestation length (days)", ylab="Body Weight (kg)")
mammals = read.table("mammals.txt", header=T)
library(mosaic)
qplot(Body, Brain, data=mammals)
qplot(log(Gestation), log(Body), data=mammals, xlab="gestation length (days)", ylab="Body Weight (kg)")
mammals = read.table("mammals.txt", header=T)
library(mosaic)
qplot(Body, Brain, data=mammals)
qplot(log(Gestation), Body, data=mammals, xlab="gestation length (days)", ylab="Body Weight (kg)")
mammals = read.table("mammals.txt", header=T)
library(mosaic)
qplot(Body, Brain, data=mammals)
qplot(Gestation, log(Body), data=mammals, xlab="gestation length (days)", ylab="Body Weight (kg)")
mammals = read.table("mammals.txt", header=T)
library(mosaic)
qplot(Body, Brain, data=mammals)
qplot(log(Gestation), log(Body), data=mammals, xlab="gestation length (days)", ylab="Body Weight (kg)")
qplot(log(Body), log(Brain), size=Gestation, data=mammals)
qplot(log(Body), log(Brain), size=Gestation, shape=I(1), data=mammals)
View(mammals)
qplot(log(Body), log(Brain), size=Litter, shape=I(1), data=mammals)
coin_outcomes = c("H", "T")
sample(coin_outcomes, size = 1, replace=TRUE)
N = 10000
tosses = sample(coin_outcomes, size = N, replace=TRUE)
N = 10000
tosses = sample(coin_outcomes, size = N, prob = c(0.2, 0.8), replace=TRUE)
library(mosaic)
qplot(1:N, numheads - (1:N)/2, geom="line", ylab="H(n)-n/2", xlab="n")
numheads = cumsum(tosses=="H")
qplot(1:N, numheads - (1:N)/2, geom="line", ylab="H(n)-n/2", xlab="n")
qplot(1:N, numheads - 0.2*N, geom="line", ylab="H(n)-0.2*n", xlab="n")
qplot(1:N, numheads/(1:N)-0.2, geom="line", ylab="H(n)/n-0.2", xlab="n", ylim=c(-0.1,0.1))
N = 10000
tosses = sample(coin_outcomes, size = N, prob = c(0.2, 0.8), replace=TRUE)
numheads = cumsum(tosses=="H")
qplot(1:N, numheads - (1:N)/2, geom="line", ylab="H(n)-n/2", xlab="n")
qplot(1:N, numheads - 0.2*N, geom="line", ylab="H(n)-0.2*n", xlab="n")
qplot(1:N, numheads/(1:N)-0.2, geom="line", ylab="H(n)/n-0.2", xlab="n", ylim=c(-0.1,0.1))
N = 10000
tosses = sample(coin_outcomes, size = N, prob = c(0.2, 0.8), replace=TRUE)
numheads = cumsum(tosses=="H")
qplot(1:N, numheads - 0.2*N, geom="line", ylab="H(n)-0.2*n", xlab="n")
qplot(1:N, numheads/(1:N)-0.2, geom="line", ylab="H(n)/n-0.2", xlab="n", ylim=c(-0.1,0.1))
load mosaic:
library(mosaic)
sum(dbinom(98:102, size=600, p=1/6))
library(mosaic)
download.file("http://www.openintro.org/stat/data/ames.RData", destfile = "ames.RData")
load("ames.RData")
area = ames$Gr.Liv.Area
price = ames$SalePrice
favstats(area)
histogram(price)
histogram(price, nint=20)
histogram(price, nint=60)
mean(price)
standdev(price)
sd(price)
favstats(price)
samp1 = sample(price, 20)
favstats(samp1)
samp1 = sample(price, 25)
favstats(samp1)
sample_means50 = do(5000) * mean(sample(area, 25))
sample_means25 = do(5000) * mean(sample(area, 25))
histogram(sample_means25)
histogram(sample_means25$mean)
histogram(sample_means25$mean, nint=50)
sample_means4 = do(5000) * mean(sample(area, 4))
sample_means4 = do(5000) * mean(sample(area, 4))
histogram(sample_means4$mean, nint=50)
histogram(sample_means4$mean, nint=100)
histogram(sample_means4$mean, nint=500)
histogram(sample_means4$mean, nint=50)
sample_means100 = do(5000) * mean(sample(area, 100))
histogram(sample_means100$mean, nint=50)
histogram(sample_means100$mean, nint=10)
histogram(sample_means100$mean, nint=100)
histogram(sample_means100$mean, nint=50)
mean(sample_means4$mean)
mean(sample_means25$mean)
mean(sample_means100$mean)
sd(sample_means4$mean)
sd(sample_means25$mean)
sd(sample_means100$mean)
sample_means25 = do(5000) * mean(sample(price, 25))
histogram(sample_means25$mean, nint=50)
sample_means4 = do(5000) * mean(sample(price, 25))
histogram(sample_means4$mean, nint=50)
histogram(sample_means4$mean, nint=20)
histogram(sample_means4$mean, nint=25)
histogram(sample_means4$mean, nint=50)
histogram(sample_means4$mean, nint=40)
histogram(sample_means4$mean, nint=25)
sample_means4 = do(5000) * mean(sample(price, 4))
histogram(sample_means4$mean, nint=25)
sample_means100 = do(5000) * mean(sample(price, 100))
histogram(sample_means100$mean, nint=25)
mean(sample_means4$mean)
mean(sample_means25$mean)
mean(sample_means100$mean)
sd(sample_means4$mean)
sd(sample_means25$mean)
sd(sample_means100$mean)
pnorm(170000, 180796.1, 79886.69/sqrt(100))
table(sample_means100 < 170000)/5000
table(sample_means100@mean < 170000)/5000
table(sample_means100$mean < 170000)/5000
table(sample_means100 < 190000 & sample_means100 > 130000)
table(sample_means100 < 190000 & sample_means100 > 130000)/5000
table(sample_means4 < 190000 & sample_means4 > 130000)
table(sample_means4 < 190000 & sample_means4 > 130000)/5000
table(sample_means4 < 190000 & sample_means4 > 130000)
table(sample_means4 < 190000 & sample_means4 > 130000)/5000
pnorm(130000, 180796.1, 79886/sqrt(4))
pnorm(130000, 180796.1, 79886/sqrt(4))
pnorm(190000, 180796.1, 79886/sqrt(4))
table(sample_means4 < 190000 & sample_means4 > 130000)/5000
pnorm(46, 40, 12/sqrt(4))
library (mosaic)
pnorm(302, 3.22, 0.0764)
library(mosaic)
age = c(22, 25, 27, 39, 42, 43, 44, 46, 46, 48, 50, 57, 58, 63, 63, 74, 74)
pores = c(75, 62, 50, 49, 54, 49, 59, 47, 54, 52, 58, 49, 52, 49, 31, 42, 41)
qplot(age, pores, xlab="Age (years)",
ylab="Percentage of the Nerve Head\n Occupied by Pores")
favstats(~age)
favstats(~pores)
cor(age~pores)
mymodel = lm(pores ~ age)
p = qplot(age, pores, xlab="Age (years)",
ylab="Percentage of the Nerve Head\n Occupied by Pores")
p + geom_smooth(method=’lm’)
p = qplot(age, pores, xlab="Age (years)",
ylab="Percentage of the Nerve Head\n Occupied by Pores")
p + geom_smooth(method=’lm’)
p = qplot(age, pores, xlab="Age (years)",
ylab="Percentage of the Nerve Head\n Occupied by Pores")
p + geom_smooth(method='lm')
> summary(mymodel)
Coefficients:
Estimate Std. Error t value Pr(>|t|)
(Intercept) 72.9184 5.5423 13.157 1.22e-09 ***
age -0.4465 0.1096 -4.073 0.000999 ***
library(mosaic)
git --version
git config --list
git -version
git version
install.packages(c("tidyverse"))
rm(list = ls())
library(RPostgreSQL)
library(postGIStools)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv,
user = clyde,
password = yodeltrese23,
dbname = "gis2",
port = 5432,
host = "localhost")
dbListTables(con)
con <- dbConnect(drv, dbname = "gis2", user = "clyde",
host = "localhost",
port = 5432,
password = "yodeltrese23")
fmarket <- "SELECT * FROM boston.farmers_markets"
fmarket.sp <- get_postgis_query(con,fmarket, geom_name="geom")
counties <- "SELECT * FROM boston.towns1"
counties.sp <- get_postgis_query(con, counties,geom_name="geom")
stops = dbGetQuery(con, "SELECT * FROM boston.stops")
head(stops)
library(rgdal)
library(rgeos)
library(sp)
library(tmap)
library(leaflet)
head(fmarket.sp)
head(counties.sp)
towns <- get_postgis_query(con, "SELECT * FROM boston.towns1",geom_name="geom")
library(RPostgreSQL)
library(postGIStools)
library(tmap)
towns <- get_postgis_query(con, "SELECT * FROM boston.towns1",geom_name="geom")
towns <- get_postgis_query(con, "SELECT * FROM boston.towns1",geom_name="geom")
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "gis2", user = usr, # Use your username
host = "localhost",
password = pwd) # Use your pwd
con <- dbConnect(drv, dbname = "gis2", user = "clyde",
host = "localhost",
port = 5432,
password = "yodeltrese23")
con <- dbConnect(drv, dbname = "gis2", user = "clyde",
host = "localhost",
port = 5432,
password = "yodeltrese23")
towns <- get_postgis_query(con, "SELECT * FROM boston.towns1",geom_name="geom")
tm_shape(towns) + tm_borders(alpha=.4)
tm_shape(towns) + tm_borders(alpha=.2) +
tm_shape(fmarket) + tm_dots(size=0.2,col="type",palette="Blues",style="cat",legend.size.show = FALSE,title = "Massachusetts Markets") +
tm_layout(legend.text.size =0.8, legend.title.size = 1.1, frame = FALSE)
library(rgdal)
library(rgeos)
library(sp)
library(tmap)
library(leaflet)
counties.sp <- counties.sp[,c(1,2,3,8)]
head(counties.sp@data)
tm_shape(counties.sp) + tm_borders(alpha=.4) +
tm_shape(fmarket.sp) + tm_dots(col = "type", scale = 1.5, palette = "Blues", style = "quantile", title = "Farmers Markets")
tmap_mode("view")
tm_shape(counties.sp) + tm_borders(alpha=.4) +
tm_shape(fmarket.sp) + tm_dots(col = "type", scale = 1.5, palette = "Blues", style = "quantile", title = "Farmers Markets")
id = cellFromXY(elev, xy = c(0.1, 0.1))
elev[id]
elev = raster(nrows = 6, ncols = 6, res = 0.5,
xmn = -1.5, xmx = 1.5, ymn = -1.5, ymx = 1.5,
vals = 1:36)
library(raster)
id = cellFromXY(elev, xy = c(0.1, 0.1))
elev[id]
library(spData)
id = cellFromXY(elev, xy = c(0.1, 0.1))
elev[id]
raster::extract(elev, data.frame(x = 0.1, y = 0.1))
grain_order = c("clay", "silt", "sand")
grain_char = sample(grain_order, 36, replace = TRUE)
grain_fact = factor(grain_char, levels = grain_order)
grain = raster(nrows = 6, ncols = 6, res = 0.5,
xmn = -1.5, xmx = 1.5, ymn = -1.5, ymx = 1.5,
vals = grain_fact)
library(sf)
library(dplyr)
library(spDataLarge)
levels(grain)[[1]] = cbind(levels(grain)[[1]], wetness = c("wet", "moist", "dry"))
levels(gain)
levels(grain)
factorValues(grain, grain[c(1, 11, 35)])
r_stack = stack(elev, grain)
names(r_stack) = c("elev", "grain")
raster::subset(r_stack, "elev")
raster::subset(r_stack, "elev")
r_stack[["elev"]]
elev[1, 1:2] = 0
cellStats(elev, sd)
hist(elev)
library(RQGIS)
ddownload.packages(RQGIS)
library(RQGIS)
data(random_points)
data(ndvi)
ch = st_combine(random_points) %>%
st_convex_hull()
download(RQGIS)
install.packages(RQGIS)
install.packages(RQGIS)
install.packages("RQGIS")
library(RQGIS)
data("random_points")
data("ndvi")
us_states
nz_height
nz
library(sf)
library(raster)
library(dplyr)
library(spData)
library(spDataLarge)
us_states
summary(us_states$total_pop_10)
intallr
if(!require(installr)) {
install.packages("installr");
require(installr)
}
install.packages(c('repr','IRdisplay','crayon','pbdZMQ', 'devtools'),repos="http://cran.us.r-project.org")
setwd("~/gis3/CDRC_Practical")
Census.Data <-read.csv("practical_data.csv")
Census.Data <-read.csv("practical_data.csv")
Census.Data <-read.csv("practicaldata.csv")
library("sp")
library("rgdal")
library("rgeos")
Output.Areas <- readOGR(".", "Camden_oa11")
Output.Areas <- readOGR(".", "Camden_oa11")
Output.Areas <- readOGR(".", "Camden_oa11")
Output.Areas <- readOGR(".", "Camden_oa11/Camden_oa11
")
Output.Areas <- readOGR(".", "Camden_oa11")
OA.Census <- merge(Output.Areas, Census.Data, by.x="OA11CD", by.y="OA")
House.Points <- readOGR(".", "Camden_house_sales")
House.Points <- readOGR(".", "Camden_house_sales")
library("tmap")
tm_shape(OA.Census) + tm_fill("Qualification", palette = "Reds", style = "quantile", title = "% with a Qualification") + tm_borders(alpha=.4)
library(spdep)
download.packages("spdep")
install.packages("spdep")
library(spdep)
neighbours <- poly2nb(OA.Census)
neighbours
plot(OA.Census, border = 'lightgrey')
plot(neighbours, coordinates(OA.Census), add=TRUE, col='red')
neighbours2 <- poly2nb(OA.Census, queen = FALSE)
neighbours2
neighbours2 <- poly2nb(OA.Census, queen = FALSE)
neighbours2
plot(OA.Census, border = 'lightgrey')
plot(neighbours, coordinates(OA.Census), add=TRUE, col='blue')
plot(neighbours2, coordinates(OA.Census), add=TRUE, col='red')
listw <- nb2listw(neighbours2)
listw
moran.test(OA.Census$Qualification, listw)
moran <- moran.plot(OA.Census$Qualification, listw = nb2listw(neighbours2, style = "W"))
moran.map <- cbind(OA.Census, local)
moran.map <- sf::cbind(OA.Census, local)
moran.map <- sp::cbind(OA.Census, local)
OA.Census
local
moran.map <- sp::cbind(OA.Census, fun = local)
moran.map <- cbind(OA.Census, fun = local)
local <- localmoran(x = OA.Census$Qualification, listw = nb2listw(neighbours2, style = "W"))
moran.map <- sp::cbind(OA.Census, local)
moran.map <- cbind(OA.Census, local)
tm_shape(moran.map) + tm_fill(col = "Ii", style = "quantile", title = "local moran statistic")
quadrant <- vector(mode="numeric",length=nrow(local))
m.qualification <- OA.Census$Qualification - mean(OA.Census$Qualification)
m.local <- local[,1] - mean(local[,1])
signif <- 0.1
quadrant[m.qualification >0 & m.local>0] <- 4
quadrant[m.qualification <0 & m.local<0] <- 1
quadrant[m.qualification <0 & m.local>0] <- 2
quadrant[m.qualification >0 & m.local<0] <- 3
quadrant[local[,5]>signif] <- 0
brks <- c(0,1,2,3,4)
colors <- c("white","blue",rgb(0,0,1,alpha=0.4),rgb(1,0,0,alpha=0.4),"red")
plot(OA.Census,border="lightgray",col=colors[findInterval(quadrant,brks,all.inside=FALSE)])
box()
legend("bottomleft",legend=c("insignificant","low-low","low-high","high-low","high-high"),
fill=colors,bty="n")
nb <- dnearneigh(coordinates(OA.Census),0,800)
nb_lw <- nb2listw(nb, style = 'B')
# plot the data and neighbours
plot(OA.Census, border = 'lightgrey')
plot(nb, coordinates(OA.Census), add=TRUE, col = 'red')
plot(OA.Census, border = 'lightgrey')
plot(nb, coordinates(OA.Census), add=TRUE, col = 'red')
local_g <- localG(OA.Census$Qualification, nb_lw)
local_g <- cbind(OA.Census, as.matrix(local_g))
names(local_g)[6] <- "gstat"
tm_shape(local_g) + tm_fill("gstat", palette = "RdBu", style = "pretty") + tm_borders(alpha=.4)
View(Census.Data)
View(OA.Census)
setwd("~/gis3/CDRC_Practical")
View(listw)
Census.Data
library("sp")
library("rgdal")
library("rgeos")
library("tmap")
Output.Areas
OA.Census
round(Census.Data$Qualification, 1)
newdata <- Census.Data
newdata$Qualificaton_2 <- myfunction(Census.Data$Qualification)
myfunction <- function(x){
z <- round(x,1)
return(z)
}
newdata$Qualificaton_2 <- myfunction(Census.Data$Qualification)
myfunction <- function(x){
z <- log(x)
y <- round(z,4)
return(y)
}
newdata$Qualification_2 <- myfunction(Census.Data$Qualification)
newdata$Unemployed_2 <- myfunction(Census.Data$Unemployed)
map <- function(x,y,z){
tm_shape(x) + tm_fill(y, palette = z, style = "quantile") + tm_borders(alpha=.4) +
tm_compass(size = 1.8, fontsize = 0.5) +
tm_layout(title = "Camden", legend.title.size = 1.1, frame = FALSE)
}
map(OA.Census, "Unemployed", "Blues")
#create a new data frame of the same properties as our data file
newdata <- Census.Data
# a for loop where i iterates from 2 to 5
for(i in 2:5){
# i is used to identify the column number
newdata[, i] <- round(Census.Data[,i], 1)
}
# open the new data
View(newdata)
for(i in 2: ncol (Census.Data)){
newdata[, i] <- Census.Data[,i]/100
}
newdata1 <- newdata
for(i in 1:nrow(newdata)){
if (newdata$White_British[i] < 0.5) {
newdata$White_British[i] <- "Low";
} else {
newdata$White_British[i] <- "High";
}
}
newdata <- newdata1
for(j in 2: ncol (newdata)){
for(i in 1:nrow(newdata)){
if (newdata[i,j] < 0.25) {
newdata[i,j] <- "Very Low";
} else if (newdata[i,j] < 0.50){
newdata[i,j] <- "Low";
} else if (newdata[i,j] < 0.75){
newdata[i,j] <- "High";
} else {
newdata[i,j] <- "Very High";
}
}
# merge our new formatted data with the output areas shapefile
shapefile <- merge(Output.Areas, newdata, by.x = "OA11CD", by.y = "OA")
# runs our predefined map function
map(shapefile, "Qualification", "Set2")
;
}}}
for(j in 2: ncol (newdata)){
for(i in 1:nrow(newdata)){
if (newdata[i,j] < 0.25) {
newdata[i,j] <- "Very Low";
} else if (newdata[i,j] < 0.50){
newdata[i,j] <- "Low";
} else if (newdata[i,j] < 0.75){
newdata[i,j] <- "High";
} else {
newdata[i,j] <- "Very High";
}
}
}
# merge our new formatted data with the output areas shapefile
shapefile <- merge(Output.Areas, newdata, by.x = "OA11CD", by.y = "OA")
# runs our predefined map function
map(shapefile, "Qualification", "Set2")
